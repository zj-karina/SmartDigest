#!/usr/bin/env python3
"""
Enhanced pipeline runner —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π MongoDB –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.
Includes database integration, enhanced categories, and irrelevant article filtering.
"""

import sys
import os
import argparse

from pipeline.enhanced_pipeline import EnhancedDigestPipeline


def main():
    parser = argparse.ArgumentParser(description='SmartDigest - Enhanced Pipeline —Å MongoDB')
    parser.add_argument('--news-count', type=int, default=50, 
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (default: 50)')
    parser.add_argument('--max-events', type=int, default=7,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ (default: 7)')
    parser.add_argument('--language', choices=['english', 'russian'], default='english',
                       help='–Ø–∑—ã–∫ –¥–∞–π–¥–∂–µ—Å—Ç–∞ (default: english)')
    parser.add_argument('--classification', default='bge_large',
                       help='–ú–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (default: bge_large)')
    parser.add_argument('--clustering-eps', type=float, default=0.35,
                       help='–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (default: 0.35)')
    parser.add_argument('--model', choices=['fast', 'balanced', 'quality', 'premium'], 
                       default='balanced', help='–ú–æ–¥–µ–ª—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (default: balanced)')
    parser.add_argument('--relevance-threshold', type=float, default=0.6,
                       help='–ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (default: 0.6)')
    parser.add_argument('--api-key', help='OpenRouter API key (–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENROUTER_API_KEY)')
    parser.add_argument('--mongodb-connection', help='MongoDB connection string (–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MONGODB_CONNECTION_STRING)')
    parser.add_argument('--no-save', action='store_true', help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã')
    parser.add_argument('--no-database', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--preview-only', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—å—é')
    parser.add_argument('--stats', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    print("üöÄ SmartDigest - Enhanced Pipeline —Å MongoDB")
    print("=" * 60)
    print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  üì∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {args.news_count}")
    print(f"  üìä –ú–∞–∫—Å. —Å–æ–±—ã—Ç–∏–π: {args.max_events}")
    print(f"  üåç –Ø–∑—ã–∫: {args.language}")
    print(f"  üóÇÔ∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {args.classification}")
    print(f"  üîç –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è eps: {args.clustering_eps}")
    print(f"  üìù –ú–æ–¥–µ–ª—å: {args.model}")
    print(f"  üéØ –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {args.relevance_threshold}")
    print(f"  üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚ùå' if args.no_database else '‚úÖ'}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    api_key = args.api_key or os.getenv('OPENROUTER_API_KEY')
    if api_key:
        print(f"  üîë API: OpenRouter (–≤–∫–ª—é—á–µ–Ω)")
    else:
        print(f"  ‚ö†Ô∏è API: –ù–µ—Ç (fallback —Ä–µ–∑—é–º–µ)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB
    mongodb_connection = args.mongodb_connection or os.getenv('MONGODB_CONNECTION_STRING')
    if not args.no_database and mongodb_connection:
        print(f"  üóÑÔ∏è MongoDB: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    elif not args.no_database:
        print(f"  ‚ö†Ô∏è MongoDB: –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    else:
        print(f"  ‚ùå MongoDB: –û—Ç–∫–ª—é—á–µ–Ω–∞")
    
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
        pipeline = EnhancedDigestPipeline(
            mongodb_connection=mongodb_connection,
            openrouter_api_key=api_key,
            classification_method=args.classification,
            clustering_eps=args.clustering_eps,
            summarization_model=args.model,
            relevance_threshold=args.relevance_threshold,
            use_database=not args.no_database
        )
        
        # –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞
        digest = pipeline.run_complete_pipeline(
            news_count=args.news_count,
            max_events=args.max_events,
            language=args.language,
            save_results=not args.no_save and not args.preview_only,
            save_to_db=not args.no_database and not args.preview_only
        )
        
        if digest:
            # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            pipeline.show_digest_preview()
            
            if args.preview_only:
                print(f"\nüì± Telegram —Ñ–æ—Ä–º–∞—Ç:")
                print("-" * 30)
                telegram_text = pipeline.summarizer.format_for_telegram(digest)
                print(telegram_text)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if args.stats:
                print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
                print("=" * 40)
                stats = pipeline.get_statistics()
                
                pipeline_stats = stats.get('pipeline', {})
                print(f"üì∞ –°—Ç–∞—Ç–µ–π —Å–æ–±—Ä–∞–Ω–æ: {pipeline_stats.get('articles_collected', 0)}")
                print(f"üóÇÔ∏è –°—Ç–∞—Ç–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {pipeline_stats.get('articles_classified', 0)}")
                print(f"‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: {pipeline_stats.get('relevant_articles', 0)}")
                print(f"üìä –°–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω–æ: {pipeline_stats.get('events_created', 0)}")
                print(f"üéØ –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {pipeline_stats.get('relevance_threshold', 0)}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏—è
            
            print(f"\nüéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(pipeline.raw_news)} —Å—Ç–∞—Ç–µ–π")
            print(f"‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: {len(pipeline.relevant_news)}")
            print(f"üéØ –°–æ–∑–¥–∞–Ω –¥–∞–π–¥–∂–µ—Å—Ç —Å {len(digest.get('items', []))} —Å–æ–±—ã—Ç–∏—è–º–∏")
            
            if not args.no_save and not args.preview_only:
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É results/")
            
            # MongoDB —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏—è
        else:
            print("‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return 1
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        pipeline.close()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main()) 